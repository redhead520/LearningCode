#!/usr/bin/env python
# -*- coding: utf-8 -*-

' a test module '

__author__ = 'redhead'

# 设计模式是什么？
#
# 设计模式是经过总结、优化的，对我们经常会碰到的一些编程问题的可重用解决方案。一个设计模式并不像一个类或一个库那样能够直接作用于我们的代码。反之，设计模式更为高级，它是一种必须在特定情形下实现的一种方法模板。设计模式不会绑定具体的编程语言。一个好的设计模式应该能够用大部分编程语言实现(如果做不到全部的话，具体取决于语言特性)。最为重要的是，设计模式也是一把双刃剑，如果设计模式被用在不恰当的情形下将会造成灾难，进而带来无穷的麻烦。然而如果设计模式在正确的时间被用在正确地地方，它将是你的救星。
#
# 起初，你会认为“模式”就是为了解决一类特定问题而特别想出来的明智之举。说的没错，看起来的确是通过很多人一起工作，从不同的角度看待问题进而形成的一个最通用、最灵活的解决方案。也许这些问题你曾经见过或是曾经解决过，但是你的解决方案很可能没有模式这么完备。
#
# 虽然被称为“设计模式”，但是它们同“设计“领域并非紧密联系。设计模式同传统意义上的分析、设计与实现不同，事实上设计模式将一个完整的理念根植于程序中，所以它可能出现在分析阶段或是更高层的设计阶段。很有趣的是因为设计模式的具体体现是程序代码，因此可能会让你认为它不会在具体实现阶段之前出现(事实上在进入具体实现阶段之前你都没有意识到正在使用具体的设计模式)。
#
# 可以通过程序设计的基本概念来理解模式：增加一个抽象层。抽象一个事物就是隔离任何具体细节，这么做的目的是为了将那些不变的核心部分从其他细节中分离出来。当你发现你程序中的某些部分经常因为某些原因改动，而你不想让这些改动的部分引发其他部分的改动，这时候你就需要思考那些不会变动的设计方法了。这么做不仅会使代码可维护性更高，而且会让代码更易于理解，从而降低开发成本。
#
# 这里列举了三种最基本的设计模式：
#
# 创建模式，提供实例化的方法，为适合的状况提供相应的对象创建方法。
# 结构化模式，通常用来处理实体之间的关系，使得这些实体能够更好地协同工作。
# 行为模式，用于在不同的实体建进行通信，为实体之间的通信提供更容易，更灵活的通信方法。

# 创建型
#
# 1. Factory Method（工厂方法）
#
# 2. Abstract Factory（抽象工厂）
#
# 3. Builder（建造者）
#
# 4. Prototype（原型）
#
# 5. Singleton（单例）
#
# 结构型
#
# 6. Adapter Class/Object（适配器）
# 
# 7. Bridge（桥接）
#
# 8. Composite（组合）
#
# 9. Decorator（装饰）
#
# 10. Facade（外观）
#
# 11. Flyweight（享元）
#
# 12. Proxy（代理）
#
# 行为型
#
# 13. Interpreter（解释器）
#
# 14. Template Method（模板方法）
#
# 15. Chain of Responsibility（责任链）
#
# 16. Command（命令）
#
# 17. Iterator（迭代器）
#
# 18. Mediator（中介者）
#
# 19. Memento（备忘录）
#
# 20. Observer（观察者）
#
# 21. State（状态）
#
# 22. Strategy（策略）
#
# 23. Visitor（访问者）

if __name__ == '__main__':
    pass